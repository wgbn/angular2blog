System.register(["angular2/core","../service/post","../service/login"],function(t,e){"use strict";var o,n,r,i,s=(e&&e.id,this&&this.__decorate||function(t,e,o,n){var r,i=arguments.length,s=i<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,o,n);else for(var c=t.length-1;c>=0;c--)(r=t[c])&&(s=(i<3?r(s):i>3?r(e,o,s):r(e,o))||s);return i>3&&s&&Object.defineProperty(e,o,s),s}),c=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};return{setters:[function(t){o=t},function(t){n=t},function(t){r=t}],execute:function(){i=function(){function t(t,e){this._postService=t,this._loginService=e,this.showLoading=!1,this.loadAllPosts()}return t.prototype.loadAllPosts=function(){var t=this;this.showLoading=!0,this._postService.getPosts().subscribe(function(e){return t.onLoadAllPostsResult(e)},function(t){return console.log(t)})},t.prototype.onLoadAllPostsResult=function(t){console.log(t),this.posts=t,this.showLoading=!1},t.prototype.logout=function(t){this._loginService.logout()},t.prototype.checkPost=function(t){try{return null!=t.user&&(!!this._loginService.isLogged()&&t.user._id==this._loginService.getUser()._id)}catch(e){return!1}return!1},t.prototype.deletePost=function(t){var e=this;this._postService["delete"](t).subscribe(function(t){return e.onDeletePostResult(t)},function(t){return e.onDeletePostError(t)})},t.prototype.onDeletePostResult=function(t){this.loadAllPosts()},t.prototype.onDeletePostError=function(t){console.log(t)},t=s([o.Component({providers:[n.PostService],templateUrl:"homeComponent.html"}),c("design:paramtypes",[n.PostService,r.LoginService])],t)}(),t("HomeComponent",i)}}});
//# sourceMappingURL=data:application/json;base64,
